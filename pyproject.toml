[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gitlint"
dynamic = ["version"]
description = "Git commit message linter written in python, checks your commit messages for style."
readme = "README.md"

license = "MIT"
requires-python = ">=3.7"
authors = [
    { name = "Joris Roovers" },
]
keywords = [
    "git",
    "gitlint",
    "lint",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "gitlint-core[trusted-deps]==0.19.0dev3",
]

[project.urls]
Homepage = "https://jorisroovers.github.io/gitlint"
Documentation = "https://jorisroovers.github.io/gitlint"
Source = "https://github.com/jorisroovers/gitlint"
Changelog = "https://github.com/jorisroovers/gitlint/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "gitlint-core/gitlint/__init__.py"

[tool.hatch.build]
exclude = [
    "*",
]

# Environments #########################################################################################################
# NOTE: By default all environments inherit from the 'default' environment

# DEV
# Workaround for editable install:
# https://github.com/pypa/hatch/issues/588
[tool.hatch.envs.dev]
description = """
Dev environment (running gitlint itself from source)
"""
pre-install-commands = [
    "pip install -e ./gitlint-core",
]

[tool.hatch.envs.dev.scripts]
fullclean = [
    "rm .coverage .coverage.lcov",
    "rm -rf site dist .pytest_cache",
    "rm -rf gitlint-core/dist gitlint-core/build gitlint-core/.pytest_cache",
    "rm -rf qa/__pycache__ qa/.pytest_cache",
]

# TEST
[tool.hatch.envs.test]
description = """
Test environment (unit tests, formatting, lint)
"""
skip-install = true
dependencies = [
    "gitlint-core[trusted-deps] @ {root:uri}/gitlint-core",
    "black==22.10.0",
    "pytest==7.2.0",
    "pytest-cov==4.0.0",
    "python-coveralls==2.9.3",
    "pylint==2.15.3",
    "radon==5.1.0",
    "pdbr==0.7.5; sys_platform != \"win32\""
]

[tool.hatch.envs.test.scripts]
unit-tests = [
    "pytest --cov=gitlint-core -rw -s {args:gitlint-core}",
]
u = "unit-tests"
unit-tests-no-cov = "pytest -rw -s {args:gitlint-core}"
format = "black --check --diff ."
lint = "pylint gitlint-core/gitlint qa"

all = [
    "unit-tests",
    "format",
    "lint"
]
stats = [
    "echo '*** Code ***'",
    "radon raw -s gitlint-core | tail -n 11",
    # echo "*** Docs ***"
    # echo "    Markdown: $(cat docs/*.md | wc -l | tr -d " ") lines"
    # echo "*** Tests ***"
    # nr_unit_tests=$(py.test gitlint-core/ --collect-only | grep TestCaseFunction | wc -l)
    # nr_integration_tests=$(py.test qa/ --collect-only | grep TestCaseFunction | wc -l)
    # echo "    Unit Tests: ${nr_unit_tests//[[:space:]]/}"
    # echo "    Integration Tests: ${nr_integration_tests//[[:space:]]/}"
    # echo "*** Git ***"
    # echo "    Commits: $(git rev-list --all --count)"
    # echo "    Commits (main): $(git rev-list main --count)"
    # echo "    First commit: $(git log --pretty="%aD" $(git rev-list --max-parents=0 HEAD))"
    # echo "    Contributors: $(git log --format='%aN' | sort -u | wc -l | tr -d ' ')"
    # echo "    Releases (tags): $(git tag --list | wc -l | tr -d ' ')"
    # latest_tag=$(git tag --sort=creatordate | tail -n 1)
    # echo "    Latest Release (tag): $latest_tag"
    # echo "    Commits since $latest_tag: $(git log --format=oneline HEAD...$latest_tag | wc -l | tr -d ' ')"
    # echo "    Line changes since $latest_tag: $(git diff --shortstat $latest_tag)"
    # # PyPi API: https://pypistats.org/api/
    # echo "*** PyPi ***"
    # info=$(curl -Ls https://pypi.python.org/pypi/gitlint/json)
    # echo "    Current version: $(echo $info | jq -r .info.version)"
    # echo "*** PyPi (Downloads) ***"
    # overall_stats=$(curl -s https://pypistats.org/api/packages/gitlint/overall)
    # recent_stats=$(curl -s https://pypistats.org/api/packages/gitlint/recent)
    # echo "    Last 6 Months: $(echo $overall_stats | jq -r '.data[].downloads' | awk '{sum+=$1} END {print sum}')"
    # echo "    Last Month: $(echo $recent_stats | jq .data.last_month)"
    # echo "    Last Week: $(echo $recent_stats | jq .data.last_week)"
    # echo "    Last Day: $(echo $recent_stats | jq .data.last_day)"
]



# QA
[tool.hatch.envs.qa]
description = """
Integration test environment.
Run a set of integration tests against any gitlint binary (not just the one from local source).
"""
detached = true
dependencies = [
    "pytest==7.2.0",
    "arrow==1.2.3",
    "sh==1.14.3; sys_platform != \"win32\"",
    "pdbr==0.7.5; sys_platform != \"win32\"",
]

[tool.hatch.envs.qa.scripts]
# The integration tests can be ran against any gitlint binary, e.g. one installed from pypi (for post-release testing)
# This is why by default we don't install the local dev version of gitlint in the qa environment
# To run integration tests against the dev version of gitlint, use install-local first
install-local="pip install -e ./gitlint-core[trusted-deps]"
integration-tests = "pytest -rw -s {args:qa}"
i = "integration-tests"


# DOCS
[tool.hatch.envs.docs]
description = """
Documentation environment. Run docs build and serve commands.
"""
detached = true
dependencies = [
    "mkdocs==1.4.2"
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve"

# Tool config ##########################################################################################################

[tool.black]
target_version = ['py37', 'py38','py39','py310']
line-length = 120
# extend-exclude: keep excluding files from .gitignore in addition to the ones specified
extend-exclude =  "gitlint-core/gitlint/tests/samples/user_rules/import_exception/invalid_python.py"

[tool.coverage.run]
branch = true # measure branch coverage in addition to statement coverage

[tool.coverage.report]
fail_under = 97
